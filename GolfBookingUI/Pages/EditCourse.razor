@page "/editcourse/{CourseId:int}"
@inject HttpClient Http
@inject GolfBookingUI.Services.AuthService AuthService
@inject NavigationManager NavManager
@using GolfBooking.Shared.Dtos

<div class="container my-4">
    <div class="card">
        <div class="card-header">
            <h3>Edit Golf Course</h3>
        </div>
        <div class="card-body">
            @if (!string.IsNullOrEmpty(message))
            {
                <div class="alert alert-danger">@message</div>
            }
            else if (courseUpdate == null)
            {
                <p><em>Loading course data...</em></p>
            }
            else
            {
                <EditForm Model="courseUpdate" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label class="form-label">Name:</label>
                        <InputText class="form-control" @bind-Value="courseUpdate.Name" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Type:</label>
                        <InputText class="form-control" @bind-Value="courseUpdate.Type" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Golf Club ID:</label>
                        <InputNumber class="form-control" @bind-Value="courseUpdate.GolfClubId" />
                    </div>

                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </EditForm>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int CourseId { get; set; }

    private CourseUpdate? courseUpdate;
    private string? message;

    protected override async Task OnInitializedAsync()
    {
        AuthService.ApplyBearerToken(Http);
        var response = await Http.GetAsync("api/GolfCourse");
        if (response.IsSuccessStatusCode)
        {
            var courses = await response.Content.ReadFromJsonAsync<List<CourseRead>>();
            var selectedCourse = courses?.FirstOrDefault(c => c.Id == CourseId);
            if (selectedCourse != null)
            {
                courseUpdate = new CourseUpdate
                {
                    Name = selectedCourse.Name,
                    Type = selectedCourse.Type,
                    GolfClubId = selectedCourse.GolfClubId
                };
            }
            else
            {
                message = "Course not found.";
            }
        }
        else
        {
            message = $"Error: {response.ReasonPhrase}";
        }
    }

    private async Task HandleValidSubmit()
    {
        AuthService.ApplyBearerToken(Http);
        var response = await Http.PutAsJsonAsync($"api/GolfCourse/{CourseId}", courseUpdate);
        if (response.IsSuccessStatusCode)
        {
            NavManager.NavigateTo("/clubs");
        }
        else
        {
            message = $"Update failed: {response.ReasonPhrase}";
        }
    }
}
