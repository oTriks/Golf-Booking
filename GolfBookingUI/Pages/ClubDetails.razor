@page "/club/{Id:int}"
@using GolfBooking.Shared.Dtos
@inject HttpClient Http
@inject NavigationManager NavManager
@inject GolfBookingUI.Services.AuthService AuthService

<h3>Club Details: @club?.Name</h3>

@if (club == null)
{
    <p><em>Loading club details...</em></p>
}
else
{
    <p><strong>Location:</strong> @club.Location</p>
    <p><strong>Type:</strong> @club.Type</p>

    @if (AuthService.IsAuthenticated && AuthService.Username == "admin")
    {
        <button @onclick="EditClub">Edit Club</button>
        <button @onclick="DeleteClub">Delete Club</button>
    }

    <h4>Courses:</h4>
    @if (club.Courses == null || !club.Courses.Any())
    {
        <p>No courses found for this club.</p>
    }
    else
    {
        <ul>
            @foreach (var course in club.Courses)
            {
                <li>
                    @course.Name (@course.Type)
                    @if (AuthService.IsAuthenticated && AuthService.Username == "admin")
                    {
                        <button @onclick="() => EditCourse(course.Id)">Edit Course</button>
                        <button @onclick="() => DeleteCourse(course.Id)">Delete Course</button>
                    }
                    @if (AuthService.IsAuthenticated)
                    {
                        <button @onclick='() => NavManager.NavigateTo($"/bookcourse/{course.Id}")'>Book Now</button>
                        <button @onclick='() => NavManager.NavigateTo($"/courseavailability/{course.Id}")'>View Availability</button>

                    }
                </li>
            }
        </ul>
    }
}

@code {
    [Parameter]
    public int Id { get; set; }

    private ClubRead? club;
    private string? message;

    protected override async Task OnInitializedAsync()
    {
        club = await Http.GetFromJsonAsync<ClubRead>($"api/GolfClub/{Id}");
    }

    private void EditClub()
    {
        NavManager.NavigateTo($"/editclub/{Id}");
    }

    private async Task DeleteClub()
    {
        if (!await ConfirmDeletion("Are you sure you want to delete this club?"))
            return;

        AuthService.ApplyBearerToken(Http);
        var response = await Http.DeleteAsync($"api/GolfClub/{Id}");
        if (response.IsSuccessStatusCode)
        {
            NavManager.NavigateTo("/clubs");
        }
        else
        {
            message = $"Delete failed: {response.ReasonPhrase}";
        }
    }

    private void EditCourse(int courseId)
    {
        NavManager.NavigateTo($"/editcourse/{courseId}");
    }

    private async Task DeleteCourse(int courseId)
    {
        if (!await ConfirmDeletion("Are you sure you want to delete this course?"))
            return;

        AuthService.ApplyBearerToken(Http);
        var response = await Http.DeleteAsync($"api/GolfCourse/{courseId}");
        if (response.IsSuccessStatusCode)
        {
            club = await Http.GetFromJsonAsync<ClubRead>($"api/GolfClub/{Id}");
        }
        else
        {
            message = $"Delete failed: {response.ReasonPhrase}";
        }
    }

    private async Task<bool> ConfirmDeletion(string message)
    {
        return await Task.FromResult(true);
    }
}
